/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package matrizjc;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.util.InputMismatchException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class Tipos extends javax.swing.JInternalFrame {
int f=0,c=0;
        String filas="",columnas="";
    /**
     * Creates new form Tipos
     */
    public Tipos() {
        initComponents();
        this.setLocation(100,200);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFila = new javax.swing.JTextField();
        txtColumna = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMatriz = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        textTipos = new javax.swing.JTextArea();

        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/image/DarkIcon.png"))); // NOI18N

        jLabel1.setText("Filas");

        jLabel2.setText("Columnas");

        txtColumna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtColumnaActionPerformed(evt);
            }
        });
        txtColumna.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtColumnaKeyPressed(evt);
            }
        });

        jButton1.setText("Ingresar Datos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TablaMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(TablaMatriz);

        textTipos.setColumns(20);
        textTipos.setRows(5);
        jScrollPane2.setViewportView(textTipos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtColumna)
                                    .addComponent(txtFila, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 417, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(txtFila, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtColumna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtColumnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtColumnaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtColumnaActionPerformed
public void verificar(){
        
        try{
            filas=txtFila.getText();//guardamos lo que el usuario ingresó
            columnas = txtColumna.getText();
            f=Integer.parseInt(filas);
            c=Integer.parseInt(columnas);
            if(f>0&c>0){
                if(f>100||c>100){
                    JOptionPane.showMessageDialog(null,"Ingrese datos con números mas pequeños");                
                }else{continuar();}
            }else{
                JOptionPane.showMessageDialog(null,"Ingrese datos mayores a cero");                
            }
        }catch(java.lang.NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Disculpa pero no se permite letras o espacios en blanco\nAsegúrese de que estén todos los valores\nError: "+e);
        }catch(HeadlessException e){
            JOptionPane.showMessageDialog(null,"Se produjo un error inesperado"+e);
        }
    }
public void continuar(){
    try{
        int fila = Integer.parseInt(txtFila.getText());
        int columna = Integer.parseInt(txtColumna.getText());
        int [][] matriz = new int[fila][columna];
        
        matriz = this.IngresarMatriz();
        this.MostrarMatriz(matriz, fila, columna);
        }catch(java.lang.NumberFormatException e){
            JOptionPane.showMessageDialog(null,"Compiló desde otra clase");
        }
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("hizo click");
        verificar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtColumnaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtColumnaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){ 
            jButton1.doClick();
            jButton1.requestFocus();
        }
    }//GEN-LAST:event_txtColumnaKeyPressed
public void MostrarMatriz(int Matriz[][],int fila,int columna){
        DefaultTableModel model = (DefaultTableModel) TablaMatriz.getModel();//podemos modificar la cantidadd de filas y columnas
        model.setRowCount(fila);//Establecer cantidad de columnas
        model.setColumnCount(columna);//Establecer cantidad de columnas
        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                TablaMatriz.setValueAt(Matriz[i][j], i, j);//(Matriz[i][j], i  establece la posicion en fila que se mostrara   , 
                                                                           //j establece la posicion de columna que se mostrara)
            }
            
        }
    }
    public int[][] IngresarMatriz(){
        
        int Fila = Integer.parseInt(filas);
        int Columna = Integer.parseInt(columnas);
        int [][] Matriz  = new int[Fila][Columna];
        
        
            
            for (int i = 0; i <Fila; i++) {
                
                for (int j = 0; j < Columna; j++) {                           
                    String SNum="";
                    int INum = 0;
                    int error = 0;
                    do{
                        try{
                            SNum=(JOptionPane.showInputDialog("Ingrese el valor: "+(i+1)+","+(j+1)+""));
                            if (INum == JOptionPane.NO_OPTION){
                                error=0;
                            break;
                        }
                            INum = Integer.parseInt(SNum);
                            Matriz[i][j]=INum;
                            
                            error = 0;
                        }catch(InputMismatchException | java.lang.NumberFormatException e){
                            error = 1;
                            JOptionPane.showMessageDialog(this, "Lo siento has introducido letras");
                            
                        }
                        
                    }while(error== 1);       }}          
       /* }catch(InputMismatchException e){
            error = true;
            JOptionPane.showMessageDialog(this, "Lo siento has introducido letras");
            
        }catch(Exception e){
            error = true;
            JOptionPane.showMessageDialog(this, "Se ha producido un error inesperado");
        
                }/}while(error = false);*/
                try {
            int rptaMatriz[][]=new int[Fila][Columna];
        int resultado=0;int  cont1 =0;
        String RFila,RColumna,Rrectangular,Rcuadrada,Rnula , Rsuperior , Rinferior
                ,Rdiagonal, Ridentidad, Ridempotente,Rsimetrica  ,Rortogonal,Rinvolutiva,
                Rantisimetrica,Rnilpotente;
        //Matriz Fila
               if(Fila == 1){
                   RFila="✓✓✓\t FILA,porque esta constituido por una sola fila. Es de dimension 1xn.";
               }
               else{
                   RFila=("!!!\t NO ES MATRIZ FILA, porque no está constituida por una sola fila. Es de dimension mxn, siendo n!=1");
               }
               //Matriz Columna
               
               if(Columna == 1){
                   RColumna=("✓✓✓\t COLUMNA,por que esta constituido por una sola columna  ");
               }else{
                   RColumna=("!!!\t NO ES COLUMNA, porque no esta constituidad por una sola columna");
               }
               //Matriz rectangular
               if(Columna!=Fila){
                   Rrectangular=("✓✓✓\t RECTANGULAR, por ");
               }
               else{
                   Rrectangular=("!!!\t NO ES RECTANGULAR, porque la cantidad de filas no es igual a la de columna, no es de dimension mxn.");
               }
               //Matriz Cuadrada
               if(Columna == Fila){
                   Rcuadrada=("✓✓✓\t CUADRADA");
               }
               else{
                   Rcuadrada=("!!!\t No es Cuadrada, porque no tiene el mismo numero de filas y columnas ");            }
               //Matriz nula
               int nul=0;
               for (int[] Matriz1 : Matriz) {
                   for (int j = 0; j<Matriz.length; j++) {
                       nul += Matriz1[j];
                   }
               }
               if (nul==0){
//                   
                    Rnula=("✓✓✓\t Es Nula");
               }
               else{
                   Rnula=("!!!\t NO Es Nula");
               }
               //Matriz triangular superior
               int matsup = 0, matinf = 0;
               if (Fila == Columna){
                   for (int i = 0; i < Matriz.length; i++) {
                       for (int j = 0; j < Matriz[0].length; j++) {
                           if ((i>j)&&(Matriz[i][j]==0)) {
                               matsup ++;
                           }
                           //Matriz triangular inferior
                           if ((i<j)&&(Matriz[i][j]==0)) {                           
                               matinf ++;
                           }
                       }
                   }                
                   if (matinf==(Fila-1)*(Fila)/2) {
                       Rinferior=("✓✓✓\t Triangular Inferior");
                   }else{
                       Rinferior=("!!!\t No Es Triangular Inferior");
                   }
                   if (matsup==(Fila-1)*(Fila)/2) {
                       Rsuperior=("✓✓✓\t Triangular Superior");
                   }else{
                       Rsuperior=("!!!\t No Es Triangular Superior");
                   }
               }else{
                   Rinferior=("!!!\t No Es Triangular Inferior");
                   Rsuperior=("!!!\t No Es Triangular Superior");
               }
               //Matriz Diagonal
               int escalar1 = 0;
               int escalar2 = 0;
               if(Matriz.length==Matriz[0].length){
                   for(int i=0;i<Matriz.length;i++){
                       for(int j=0;j<Matriz[0].length;j++){
                           if(i==j&&Matriz[i][j]!=0){
                               escalar1++;            
                           }
                           if(j!=i&&Matriz[i][j]==0){
                               escalar2++;
                           }
                       }
                   }
                   if(escalar2==((Matriz.length-1)*Matriz[0].length)&escalar1==((Matriz.length-1)*Matriz[0].length)/2){
                       Rdiagonal=("✓✓✓\t Es una matriz diagonal");
                   }else{
                       Rdiagonal=("!!!\t No es una matriz diagonal");
                   }
               }else{
                   Rdiagonal=("!!!\t No es Cuadrada, Por lo tanto No puede ser diagonal");
               }
               //Matriz identidad o unidad
               if(Matriz.length==Matriz[0].length){
                   int sumdiag = 0;
                   int sumelem = 0;
                   for (int i = 0 ; i < Matriz.length;i++){
                       for (int j= 0;j<Matriz.length;j++){
                           if((i==j)&&(Matriz[i][j]==1)){
                               sumelem++;
                           }
                           if ((i!=j)&&(Matriz[i][j])==0){
                               sumdiag++;
                           }
                       }
                   }
                   if ((sumdiag==(Fila-1)*Fila)&&(sumelem==Fila)){
                       Ridentidad=("✓✓✓\t Es Identidad o unidad");
                   }else{
                       Ridentidad=("!!!\t No es identidad o unidad");
                   }
               }else{
                   Ridentidad=("!!!\t No es identidad o unidad");
               }
               int contador = 0;int simetrica = 0 , antisimetrica = 0 ,ortogonal=0, involutiva=0, nilpotente=0;
               if(Matriz.length==Matriz[0].length){
                   //creamos dos arreglos como auxiliares  
                   //estos serviran para almacenar valores temporalmente
                   int [] aux;
                   int [] aux2;
                   //analizamos la matriz para comprobar si es idempotente : 
                   for(int i=0;i<Fila;i++){
                       for(int j=0;j<Columna;j++){
                           aux= new int [Fila];
                           aux2= new int [Columna];
                           for(int k=0;k<Fila;k++){
                               aux[k]=Matriz[i][k];
                               aux2[k]=Matriz[k][j];
                               //realizamos la suma de la multiplicación  
                               resultado=resultado+aux[k]*aux2[k];
                               rptaMatriz[ i ][j ] += Matriz[i][k]*Matriz[k][j];
                           }              
                           if(resultado==Matriz[i][j]){
                               contador++;
                           }                          
                           //analizamos la matriz para comprobar si es ortogonal :     
                           //Ortogonal
                           if(i==j){
                               if(resultado==1){
                                   ortogonal++;
                               }
                           }if (i!=j) {
                               if (resultado ==0) {
                                   cont1++;
                               }
                           }
                           //analizamos la matriz para comprobar si es involutiva : 
                           if(i==j){
                               if(resultado==1){
                                   involutiva++;
                               }
                           }
                           if(resultado == 0){
                               nilpotente++;
                           }
                           //se asigna el valor de resultado a 0
                           //para realizar los siguiente bucles
                           resultado=0;
                       }
                   }
                   if(contador==Fila*Columna){
                       Ridempotente=("✓✓✓\t Es una matriz idempotente");
                       for (int  i = 0; i < Columna; i++ )
                       { /* abre for que controla numero de renglones
                            Este ciclo imprime la primera matriz
                            No hay ningun problema para imprimir la primera matriz, ya que se
                            trata de un par de ciclos for. Sin embargo se quiere imprimir las
                            tres matrices, lo cual hace un poquito mas complicado el asunto.
                            De todas formas la primera se imprime renglon por renglon
                            solo que antes de pasar al siguiente renglon, se escriben las entradas
                            correspondientes de la segunda y tercera matrices.*/
                           for (int  j = 0; j< Fila; j++)
                           { 
                               System.out.printf("%3d", Matriz[i][j]);                              
                           }
                           System.out.printf("\t");
                           for (int j = 0; j < Matriz.length; j++)
                           { 
                               if ( i <= (Columna - 1)) 
                                   System.out.printf("%3d", Matriz[i][j]);
                               System.out.printf(" ");
                           } 
                           System.out.printf ("\t -->"); 
                           for ( int j = 0; j < Matriz.length; j++ )
                           {                               
                               System.out.printf("%3d", rptaMatriz[i][j]);
                           } 
                           System.out.printf("\n");
                       }
                   }
                   else{
                       Ridempotente=("!!!\t No es una matriz idempotente");
                   }                                
                   if(involutiva==Fila){      
                       Rinvolutiva=("✓✓✓\t Es una matriz involutiva");
                       for (int  i = 0; i < Columna; i++ )
                       {
                           for (int  j = 0; j< Fila; j++)
                           { 
                               System.out.printf("%3d", Matriz[i][j]);
                           }
                           System.out.printf("\t");
                           for (int j = 0; j < Matriz.length; j++){
                               if ( i <= (Columna - 1)) 
                                   System.out.printf("%3d", Matriz[i][j]);
                               System.out.printf(" ");
                           } 
                           System.out.printf ("\t -->"); 
                           for ( int j = 0; j < Matriz.length; j++ ){ 
                               System.out.printf("%3d", rptaMatriz[i][j]);
                           } 
                           System.out.printf("\n");
                       }
                   }
                   else{
                       Rinvolutiva=("!!!\t No es una matriz involutiva");
                   }
                   if((ortogonal==Columna)&&(cont1==(Fila-1)*Fila)){
                       Rortogonal=("✓✓✓\t Es una matriz ortogonal");
                       for (int  i = 0; i < Columna; i++ ){
                           for (int  j = 0; j< Fila; j++){ 
                               System.out.printf("%3d", Matriz[i][j]);                            
                           }
                           System.out.printf("\t");
                           for (int j = 0; j < Matriz.length; j++){
                               if ( i <= (Columna - 1)) 
                                   System.out.printf("%3d", Matriz[i][j]);
                               System.out.printf(" ");
                           } 
                           System.out.printf ("\t -->"); 
                           for ( int j = 0; j < Matriz.length; j++ ){ 
                               System.out.printf("%3d", rptaMatriz[i][j]);
                           } 
                           System.out.printf("\n");
                       }
                   }
                   else{
                       Rortogonal=("!!!\t No es una matriz ortogonal");
                   }
                   if((nilpotente == Fila*Columna)){
                       Rnilpotente=("✓✓✓\t Es una matriz Nilpotente");
                       for (int  i = 0; i < Columna; i++ ){
                           for (int  j = 0; j< Fila; j++){ 
                               System.out.printf("%3d", Matriz[i][j]);                               
                           }
                           System.out.printf("\t");
                           for (int j = 0; j < Matriz.length; j++){
                               if ( i <= (Columna - 1)) 
                                   System.out.printf("%3d", Matriz[i][j]);
                               System.out.printf(" ");
                           } 
                           System.out.printf ("\t -->"); 
                           for ( int j = 0; j < Matriz.length; j++ ){ 
                               System.out.printf("%3d", rptaMatriz[i][j]);
                           } 
                           System.out.printf("\n");
                       }
                   }
                   else{
                       Rnilpotente=("!!!\t No es una matriz Nilpotente");
                   }
               }  
               else{
                   Ridempotente=("!!!\t No es una matriz idempotente");
                   Rinvolutiva=("!!!\t No es una matriz involutiva");
                   Rortogonal=("!!!\t No es una matriz ortogonal");
                   Rnilpotente=("!!!\t No es una matriz Nilpotente");   
               }
               //Matriz Simetrica  ,ortogonal,involutiva,antisimetrica           
               if (Columna == Fila){
                   for ( int i = 0; i < Fila; i++) {
                       for ( int j = 0; j < Columna; j++) {
                           if ((i!=j)&&(Matriz[i][j] == Matriz[j][i])) {
                               simetrica ++;
                           }
                           //Matriz antisimetrica
                           if ((i!=j)&&(Matriz[i][j] == -1*(Matriz[j][i]))) {
                               antisimetrica ++;
                           }
                       }
                   }
                   if (simetrica==(Fila-1)*Fila) {
                       Rsimetrica=("✓✓✓\t Simetrica");
                   }else{
                       Rsimetrica=("!!!\t No Es Simetrica");
                   }
                   if (antisimetrica==(Fila-1)*Fila) {
                       Rantisimetrica=("✓✓✓\t Antisimetrica");
                   }else{
                       Rantisimetrica=("!!!\t No es Antisimetrica");
                   }
               }else{
                   Rsimetrica=("!!!\t No Es Cuadrada, Por lo Tanto No  Es Simetrica");
                   Rantisimetrica=("!!!\t No Es Cuadrada, Por lo Tanto No  Es Antiimetrica");

               }
        
 

               textTipos.setText(RFila+"\n"+
                       RColumna+"\n"+Rrectangular+"\n"+Rcuadrada+"\n"+Rnula +"\n"+ Rsuperior+"\n" + Rinferior+"\n"
                +Rdiagonal+"\n"+ Ridentidad+"\n"+ Ridempotente+"\n"+Rsimetrica  +"\n"+Rortogonal+"\n"+Rinvolutiva+"\n"+
                Rantisimetrica+"\n"+Rnilpotente);
        } catch (Exception e) {
                    System.out.println("a ocurrido un error");
        }
    return Matriz;}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaMatriz;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textTipos;
    private javax.swing.JTextField txtColumna;
    private javax.swing.JTextField txtFila;
    // End of variables declaration//GEN-END:variables
}
